GAME NAME: SHATTERFARE

--- EDITOR ----
max box clone for matrix 
matrix - shift + 3/4 clicks otherwise you don't fuck it up
non spawning area with default structures to grab with dynamic matrices (actually you can even just add that on click)
delete box
create matrix from selection
rotate matrix (tosta)
multiplayer editing
toggle collision with building
undo + redo
one instanced mesh per team/player (dynamic material changing - maybe we want the castle to become transparent for some weapons)
Specular compared to axis (place axis around)

--- MECHANICS ---
le bandierine? sono i cristalli piccoli. I generatori servono a
Players should be able to jump on top of one another to reach places (very useful when castle is broken)
fast building vs customization?
destroy if no sustain?
attacks have to be suuuuper slow
Weapons: tempo vs value! Tempo = precise, fast, unpredictable attacks, value = spread, slow/delayed, predictable but devastating
Weapons: some keep the player busy for value, some have a very slow reload (forced tiers?)
Weapons that disable a weapon will force moving around without the reload mumbo jumbo (may just include them)

--- WEAPONS ---
Grapple catapult!
Sniper Rifle?
Playable drones (value on information or sabotage?)
Deployable drones (launch missle, select destination, will permanently shoot around destination)
Light gun, high fire rate, bread and butter (should we have this?)
big ass lazors/meteors that push inside the castle gradually kamehameha style
?create weapons as in minecraft? 

--- PERFORMANCE / PROJECT MAINTENANCE ---
Collision channels
Projectiles - no shadows
Projectile pooling
No big assets until it's time - fuck graphics, only gameplay. Visual stuff can be ok for prototyping but only if it's light.
Saves merge that kills overlapping meshes
Position of cubes should be defined by a simple integer

--- TECH DEBT ---
dynamic matrices - plane should be created on first click (allow doing the thing on every thing!)
rename stuff - arrow (and many others)
remove vars not needed all around the class via function inside function
delete useless stuff
Sphere collision for projectiles
relocate content properly
tiling should be an integer...
save integers, replicate integers (or bytes)
if performance bites: marching cube research, ask @John Alcatraz, look up tutorials for minecraft (in unity or any engine) https://blackflux.wordpress.com/2014/02/23/meshing-in-voxel-engines-part-1/   --- best voxel algorithm: dual cotouring https://pdfs.semanticscholar.org/e9e3/1ff64a19b2ea70e8dc25e4bbca685fa125ab.pdf?_ga=2.261631053.1700072344.1503640427-1627040403.1502950331
quick solution to the above: collect transforms into a single byte array or integer (xxxyyyzzz) and split the world grid into multiple instanced meshes (up to -totest- instances each)
boolean names should be bMyBoolean and not MyBoolean


--- LONG LIVE THE KING ---
Customizable cube material / mod support

